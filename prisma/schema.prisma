// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  role     UserRole  @default(USER)
  verified DateTime?

  fullName String
  phone    String @unique
  email    String @unique
  password String

  provider   String?
  providerId String?

  cart   Cart?
  orders Order[]

  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())

  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  name     String @unique
  imageUrl String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  variants ProductVariant[]

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id Int @id @default(autoincrement())

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  size      Int?
  pizzaType Int?
  price     Int

  cartItems CartItem[]
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String @unique
  price    Int
  imageUrl String

  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  token String @unique

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  items      CartItem[]
  totalPrice Int

  order Order?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int

  ingredients Ingredient[]

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  fullName String
  phone    String
  address  String
  comment  String?

  totalPrice Int

  status OrderStatus @default(PENDING)

  paymentId String?

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int  @unique

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  code String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  createdAt DateTime @default(now())

  @@unique([code, userId])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELED
}

enum UserRole {
  USER
  ADMIN
}
